1.
 fn is_palindrome(text: &str) -> bool {
  let mut chars = text.chars();
  let mut reversed = chars.rev();
  text.chars().eq(reversed)
}

fn main() {
  let text1 = "racecar";
  let text2 = "hello";

  println!("{} is a palindrome: {}", text1, is_palindrome(text1));
  println!("{} is a palindrome: {}", text2, is_palindrome(text2));
}

2.
fn find_first(arr: &[i32], target: i32) -> Option<usize> {
  arr.iter().position(|&x| x == target)
}

fn main() {
  let numbers = vec![1, 3, 5, 7, 7, 8, 10];
  let target = 7;

  match find_first(&numbers, target) {
    Some(index) => println!("First occurrence of {} found at index: {}", target, index),
    None => println!("{} not found in the array", target),
  }
}

3.
fn shortest_word(text: &str) -> Option<&str> {
  text.split_whitespace().min_by_key(|word| word.len())
}

fn main() {
  let text = "The quick brown fox jumps over the lazy dog";

  match shortest_word(text) {
    Some(word) => println!("Shortest word: {}", word),
    None => println!("Empty string or no words found"),
  }
}

4.
fn is_prime(num: u32) -> bool {
  if num <= 1 {
    return false;
  }
  for i in 2..(num as f64).sqrt().ceil() as u32 {
    if num % i == 0 {
      return false;
    }
  }
  true
}

fn main() {
  let numbers = [13, 25, 31];

  for num in numbers.iter() {
    println!("{} is prime: {}", num, is_prime(*num));
  }
}

5.
fn median(arr: &[i32]) -> f64 {
  let len = arr.len();
  let mid_index = len / 2;

  if len % 2 == 0 {

    (arr[mid_index - 1] as f64 + arr[mid_index] as f64) / 2.0
  } else {

    arr[mid_index] as f64
  }
}

fn main() {
  let numbers = vec![1, 3, 5, 7, 9];
  let median_value = median(&numbers);

  println!("Median of {:?}: {}", numbers, median_value);
}

6.
fn longest_common_prefix(strs: &[String]) -> String {
  if strs.is_empty() {
    return String::from("");
  }

  let mut prefix = strs[0].clone();

  for word in strs.iter().skip(1) {
    while !word.starts_with(&prefix) {
      prefix = prefix.chars().take(prefix.len() - 1).collect();
      if prefix.is_empty() {
        return String::from("");
      }
    }
  }

  prefix
}

fn main() {
  let words = vec![String::from("flower"), String::from("flow"), String::from("flight")];
  let prefix = longest_common_prefix(&words);
  println!("Longest common prefix: {}", prefix);
}

7.
fn kth_smallest_sorted(arr: &[i32], k: usize) -> Option<i32> {
  if k > arr.len() {
    return None;
  }
  let mut sorted_arr = arr.to_owned();
  sorted_arr.sort();
  Some(sorted_arr[k - 1])
}

fn main() {
  let numbers = vec![7, 2, 5, 1, 4, 3];
  let k = 3;  // Find the 3rd smallest element

  match kth_smallest_sorted(&numbers, k) {
    Some(value) => println!("{}th smallest element: {}", k, value),
    None => println!("Invalid k value"),
  }
}